C251 COMPILER V5.60.0,  speed                                                              20/03/25  21:17:17  PAGE 1   


C251 COMPILER V5.60.0, COMPILATION OF MODULE speed
OBJECT MODULE PLACED IN .\Out_File\speed.obj
COMPILER INVOKED BY: D:\keil\C251\BIN\C251.EXE ..\USER\src\speed.c XSMALL INTR2 WARNINGLEVEL(3) BROWSE INCDIR(..\..\Libr
                    -aries\libraries;..\..\Libraries\seekfree_libraries;..\..\Libraries\seekfree_peripheral;..\CODE;..\USER\inc;..\USER\src) 
                    -DEBUG PRINT(.\Out_File\speed.lst) OBJECT(.\Out_File\speed.obj) 

stmt  level    source

    1          #include "speed.h"
    2          #include "math.h"
    3          
    4          int16 aim_speed        = 5;  //目标速度  
    5          int16 real_speed       = 0;    //左右轮平均速度 
    6          int16 left_speed       = 0;    //左轮速度
    7          int16 right_speed      = 0;    //右轮速度
    8          int16 last_speed       = 0;    
    9          int16 left_last_speed  = 0;
   10          int16 right_last_speed = 0;
   11          int16 left_real_speed  = 0;
   12          int16 right_real_speed = 0;
   13          
   14          int16 All_PWM_left     = 0;     //左轮所有PWM输出
   15          int16 All_PWM_right    = 0;     //右轮所有PWM输出
   16          int16 Speed_pwm_left   = 0;     //左轮速度环PWM（C车用）
   17          int16 Speed_pwm_right  = 0;     //右轮速度环PWM（C车用）
   18          int16 Real_Speed_left  = 0;     //左轮实际速度
   19          int16 Real_Speed_right = 0;     //右轮实际速度
   20          int16 Speed_pwm_all    = 0;     //左右平均速度环PWM（D车用）
   21          int16 Steer_pwm        = 0;     //转向内环PWM
   22          uint16 Open_pack_time  = 0;     //打开干簧管定时
   23          uint16 Stop_time       = 0;     //停车定时
   24           
   25          /******************************* 电机初始化***********************************
   26          函数：  void init_PWM(unsigned char Motor_Set)
   27          参数：  Motor_Set---为0时初始化为BTN驱动方式，为1时初始化DRV驱动方式
   28          说明：  分母10000
   29                              pwm_init(PWMA_CH1P_P60, 10000, 0); 
   30                  初始化PWM  使用引脚P6.0  输出PWM频率10000HZ  占空比为百分之 pwm_duty / PWM_DUTY_MAX * 100                               
   31          返回值：无  
   32          *****************************************************************************/
   33          unsigned char MOTOR_MODE=0;//中间变量，请勿修改删除！！！
   34          void init_PWM(unsigned char Motor_Set)
   35          {
   36   1              MOTOR_MODE = Motor_Set;
   37   1              if (MOTOR_MODE==0) 
   38   1              {
   39   2      //-----MOS驱动-----------
   40   2          pwm_init(Left_Z_Pin,  20000,0);//左轮初始化
   41   2                pwm_init(Left_F_Pin,  20000,0);
   42   2                pwm_init(Right_Z_Pin, 20000,0);//右轮初始化
   43   2                pwm_init(Right_F_Pin, 20000,0);
   44   2              }
   45   1                      else
   46   1              {
   47   2      //------DRV驱动-------------
   48   2                pwm_init(Left_PWM_Pin, 20000,0);//左轮初始化
   49   2              pwm_init(Right_PWM_Pin,20000,0);//右轮初始化
   50   2                      gpio_mode(P6_4,GPO_PP);       // 设置DRV方向引脚为为推挽输出
   51   2                gpio_mode(P6_0,GPO_PP);       // 设置DRV方向引脚为为推挽输出
   52   2       } 
   53   1      }
   54          /****************************编码器初始化****************************
   55          函数：  void encoder_init(void)
   56          功能：  编码器初始化
   57          参数：  无
C251 COMPILER V5.60.0,  speed                                                              20/03/25  21:17:17  PAGE 2   

   58          说明：  ctimer_count_init(CTIM0_P34);
   59                  编码器使用TIM3和TIM4，如更改引脚只需修改宏定义即可 
   60                  编码器使用带方向的编码器（STC不支持正交解码）
   61          返回值：无
   62          ********************************************************************/
   63          void encoder_init()
   64          {
   65   1          //左编码器初始化
   66   1                      ctimer_count_init(Left_Ecoder_Pin1);
   67   1                      //右编码器初始化
   68   1                      ctimer_count_init(Right_Ecoder_Pin1);
   69   1      }  
   70          /***************************速度测量********************************
   71          函数名：speed_measure()
   72          功  能：速度测量，读取编码器的值，不同编码器安装和车的前进方向不对会
   73                  导致采集的值可能是反过来的，只需修改* (-1)就行，改到上面就可
   74                  以了
   75          参  数：void
   76          返回值：void
   77          ******************************************************************/
   78          void speed_measure()
   79          { 
   80   1                int16 temp_L, temp_R;
   81   1          temp_L = ctimer_count_read(Left_Ecoder_Pin1); // 左右轮当前速度
   82   1          temp_R = ctimer_count_read(Right_Ecoder_Pin1);
   83   1      
   84   1          ctimer_count_clean(Left_Ecoder_Pin1); // 编码器清零
   85   1          ctimer_count_clean(Right_Ecoder_Pin1);
   86   1                
   87   1                if(Left_Ecoder_Pin2 == 1)
   88   1              left_speed = temp_L;
   89   1          else
   90   1              left_speed = (1) * temp_L;
   91   1          if(Right_Ecoder_Pin2 == 0)
   92   1              right_speed = temp_R;
   93   1          else
   94   1              right_speed = (1) * temp_R;
   95   1                      
   96   1                      last_speed = (right_speed+left_speed)/2;// 速度平均值
   97   1                real_speed*=0.8;            //一阶低通滤波器
   98   1                real_speed+=last_speed*0.2; //一阶低通滤波器  left_last_speed
   99   1                      
  100   1                      left_last_speed =left_speed;
  101   1                left_real_speed*=0.8;       //一阶低通滤波器
  102   1                left_real_speed+=left_last_speed*0.2; //一阶低通滤波器
  103   1                      
  104   1                      right_last_speed =right_speed;
  105   1                right_real_speed*=0.8;        //一阶低通滤波器
  106   1                right_real_speed+=right_last_speed*0.2; //一阶低通滤波器
  107   1      }
  108          /*******************************出库定时打开干簧管等***********************************
  109          函数：  void timed_task(void)
  110          参数：  无
  111          说明：  出库完成定时打开干簧管等作为标志位处理，防止刚出库就检测到停车
  112          返回值：无 
  113          *************************************************************************************/
  114          void timed_task(void)
  115          {
  116   1              if(flag_start)
  117   1              {
  118   2                      Open_pack_time=Open_pack_time+10;
  119   2              }
  120   1              if(flag_end)
  121   1              {
  122   2                      T_inku_wait=T_inku_wait+5;
  123   2              }
C251 COMPILER V5.60.0,  speed                                                              20/03/25  21:17:17  PAGE 3   

  124   1              if(T_inku_J)
  125   1              {
  126   2                      T_inku_S=T_inku_S+5;
  127   2              }
  128   1      }
  129          
  130          /*****************************电机输出*******************************************
  131          函数：void go_motor (int16 left_PWM,int16 right_PWM)
  132          参数：  int16 left_PWM,int16 right_PWM
  133          说明：pwm_duty(PWMA_CH1P_P60, duty);
  134                务必将车子的电机逻辑调像这个一样，第一个参数控制左电机，第二个参数控制右电机
  135                传入的参数如果为正数，电机正转，负值反转！！！！！
  136          返回值：无 
  137          ********************************************************************************/
  138          #define Duty_Max  6000   //限幅最大值
  139          
  140          void go_motor (int16 left_PWM,int16 right_PWM)
  141          {
  142   1        if  (MOTOR_MODE==0)
  143   1        {     
  144   2      //---------------------------------MOS驱动-----------------------------------------     
  145   2          if (left_PWM>0)                   //左轮
  146   2          {
  147   3                       left_PWM = left_PWM<=Duty_Max ? left_PWM : Duty_Max;
  148   3           pwm_duty(Left_Z_Pin,left_PWM);
  149   3           pwm_duty(Left_F_Pin,0);                        //正转
  150   3          }   
  151   2          else 
  152   2          {
  153   3           left_PWM = left_PWM>=-Duty_Max ? (-left_PWM) : Duty_Max;  
  154   3           pwm_duty(Left_Z_Pin,1);    
  155   3           pwm_duty(Left_F_Pin,left_PWM);       //反转
  156   3          } 
  157   2          if (right_PWM>0)                  //右轮
  158   2          { 
  159   3           right_PWM = right_PWM<=Duty_Max ? right_PWM : Duty_Max; 
  160   3                 pwm_duty(Right_Z_Pin,right_PWM);     
  161   3                 pwm_duty(Right_F_Pin,0);                         //正转
  162   3          } 
  163   2          else 
  164   2          {
  165   3           right_PWM = right_PWM>=-Duty_Max ? (-right_PWM) : Duty_Max;  
  166   3                 pwm_duty(Right_Z_Pin,1);     
  167   3                 pwm_duty(Right_F_Pin,right_PWM); //反转
  168   3          }
  169   2        }
  170   1        else
  171   1        {
  172   2      //-------------------------------------------DRV驱动-------------------------------------
  173   2         if (left_PWM>0)                     //左轮
  174   2         {
  175   3                       left_PWM = left_PWM<=Duty_Max ? left_PWM : Duty_Max;
  176   3                       Left_DIR_Pin=0;                         
  177   3           pwm_duty(Left_PWM_Pin,left_PWM);  //正转
  178   3         }    
  179   2         else 
  180   2         {
  181   3           left_PWM = left_PWM>=-Duty_Max ? (-left_PWM) : Duty_Max;  
  182   3           Left_DIR_Pin=1;    
  183   3           pwm_duty(Left_PWM_Pin,left_PWM);  //反转
  184   3         }
  185   2         if (right_PWM>0)                    //右轮
  186   2         {
  187   3           right_PWM = right_PWM<=Duty_Max ? right_PWM : Duty_Max;
  188   3           Right_DIR_Pin=0;                    
  189   3                 pwm_duty(Right_PWM_Pin,right_PWM);//正转             
C251 COMPILER V5.60.0,  speed                                                              20/03/25  21:17:17  PAGE 4   

  190   3               } 
  191   2         else 
  192   2         {
  193   3           right_PWM = right_PWM>=-Duty_Max ? (-right_PWM) : Duty_Max;  
  194   3                 Right_DIR_Pin=1;
  195   3                 pwm_duty(Right_PWM_Pin,right_PWM); //反转
  196   3         }
  197   2        }
  198   1      }


Module Information          Static   Overlayable
------------------------------------------------
  code size            =       774     ------
  ecode size           =    ------     ------
  data size            =    ------     ------
  idata size           =    ------     ------
  pdata size           =    ------     ------
  xdata size           =    ------     ------
  xdata-const size     =    ------     ------
  edata size           =        39     ------
  bit size             =    ------     ------
  ebit size            =    ------     ------
  bitaddressable size  =    ------     ------
  ebitaddressable size =    ------     ------
  far data size        =    ------     ------
  huge data size       =    ------     ------
  const size           =    ------     ------
  hconst size          =       119     ------
End of Module Information.


C251 COMPILATION COMPLETE.  0 WARNING(S),  0 ERROR(S)
